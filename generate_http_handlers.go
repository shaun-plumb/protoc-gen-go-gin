package main

import (
	"fmt"
	"path/filepath"
	"runtime/debug"
	"strings"
	"time"

	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	errorsPackage   = protogen.GoImportPath("errors")
	httpPackage     = protogen.GoImportPath("net/http")
	contextPackage  = protogen.GoImportPath("context")
	ginPackage      = protogen.GoImportPath("github.com/gin-gonic/gin")
	codesPackage    = protogen.GoImportPath("google.golang.org/grpc/codes")
	statusPackage   = protogen.GoImportPath("google.golang.org/grpc/status")
	validatePackage = protogen.GoImportPath("buf.build/go/protovalidate")

	deprecationComment = "// Deprecated: Do Not Use."
)

var methodSets map[string]int
var commonPackage = protogen.GoImportPath(getModulePath() + "/common")

func getModulePath() string {
	bi, ok := debug.ReadBuildInfo()
	if !ok {
		return ""
	}
	return bi.Path
}

// generateHTTPHandlerFile generates a _http.pb.go file containing gin handler.
func generateHTTPHandlerFile(gen *protogen.Plugin, file *protogen.File, gp *GenParam) *protogen.GeneratedFile {
	if len(file.Services) == 0 || (*gp.Omitempty && !hasHTTPRule(file.Services)) {
		return nil
	}

	filename := file.GeneratedFilenamePrefix + "_http.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	// Output the versions and the don't modify header
	printHeaders(g, gen, true)

	g.P("")

	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g, gp)
	return g
}

func printHeaders(g *protogen.GeneratedFile, gen *protogen.Plugin, dontEdit bool, lines ...string) {
	module := "unknown"
	if bi, ok := debug.ReadBuildInfo(); ok {
		module = bi.Main.Path
		_, module = filepath.Split(module)
	}
	editmsg := ""
	if dontEdit {
		editmsg = " DO NOT EDIT."
	}
	g.P("// Code generated by " + module + "." + editmsg)
	g.P("// " + time.Now().Format(time.RFC3339))
	for _, line := range lines {
		g.P(fmt.Sprintf("// %s", line))
	}
	g.P("\n")
	g.P("// versions:")
	g.P(fmt.Sprintf("// \t"+module+" %s", Version))
	protocVersion := getProtocVersion(gen)
	g.P("// \tprotoc            ", protocVersion)
}

func getProtocVersion(gen *protogen.Plugin) string {
	protocVersion := "(unknown)"
	if v := gen.Request.GetCompilerVersion(); v != nil {
		protocVersion = fmt.Sprintf("v%v.%v.%v", v.GetMajor(), v.GetMinor(), v.GetPatch())
		if s := v.GetSuffix(); s != "" {
			protocVersion += "-" + s
		}
	}
	return protocVersion
}

// generateFileContent generates the _http.pb.go file content, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, gp *GenParam) {
	if len(file.Services) == 0 {
		return
	}

	// A bunch of variables are defined here to ensure that these packages are correct when the program is compiled.
	// If the package does not exist or the defined package variables do not exist, the compilation will fail.
	g.P("// This is a compile-time assertion to ensure that generated files are safe and compilable.")

	// As long as the Ident method is called, it will be automatically written to the import, so if there is no
	// special requirement for the import package name, just use Ident directly
	g.P("var _ ", contextPackage.Ident("Context"))
	g.P("var _ ", httpPackage.Ident("Client"))
	g.P("var _ =", errorsPackage.Ident("New"))
	g.P("var _ = ", commonPackage.Ident("ExtractPathParameters"))
	g.P("var _ = ", statusPackage.Ident("New"))

	if *gp.GenValidateCode {
		g.P("var _ = ", validatePackage.Ident("Validate"))
	}

	g.P("const _ = ", ginPackage.Ident("Version"))
	g.P("const _ = ", codesPackage.Ident("OK"))

	g.P()

	// At this point, we have successfully imported the package name and written the variables.
	// The rest is to generate the corresponding handler for the rpc service
	for _, service := range file.Services {
		genService(gen, file, g, service, gp, false)
	}
}

// Generate code for rpc services defined in .proto file
func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, gp *GenParam, serviceCode bool) {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}

	methodSets = make(map[string]int)

	sd := &serviceDesc{
		PackageName: string(file.GoPackageName),
		ServiceType: service.GoName,
		ServiceName: string(service.Desc.FullName()),
		Metadata:    file.Desc.Path(),
		GenValidate: *gp.GenValidateCode,
	}

	for _, method := range service.Methods {
		// skip streaming client/server
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		// build HTTP rule based on annotations
		rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
		if rule != nil && ok {
			for _, bind := range rule.AdditionalBindings {
				sd.Methods = append(sd.Methods, buildHTTPRule(g, method, bind))
			}
			sd.Methods = append(sd.Methods, buildHTTPRule(g, method, rule))
		} else if !*gp.Omitempty {
			path := fmt.Sprintf("/%s/%s", service.Desc.FullName(), method.Desc.Name())
			sd.Methods = append(sd.Methods, buildMethodDesc(g, method, "POST", path))
		}
	}

	if len(sd.Methods) != 0 {
		g.P(sd.execute(serviceCode))
	}
}

// Check for the existence of an HTTP rule such as
//
//	option (google.api.http) = {
//	     get: "/user/query"
//	   };
func hasHTTPRule(services []*protogen.Service) bool {
	for _, service := range services {
		for _, method := range service.Methods {
			if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
				continue
			}
			rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
			if rule != nil && ok {
				return true
			}
		}
	}
	return false
}

// Parse the HTTP rule and generate the appropriate handler
func buildHTTPRule(g *protogen.GeneratedFile, m *protogen.Method, rule *annotations.HttpRule) *methodDesc {
	var (
		path         string
		method       string
		body         string
		responseBody string
	)
	// 读取 路由和方法
	switch pattern := rule.Pattern.(type) {
	case *annotations.HttpRule_Get:
		path = pattern.Get
		method = "GET"
	case *annotations.HttpRule_Put:
		path = pattern.Put
		method = "PUT"
	case *annotations.HttpRule_Post:
		path = pattern.Post
		method = "POST"
	case *annotations.HttpRule_Delete:
		path = pattern.Delete
		method = "DELETE"
	case *annotations.HttpRule_Patch:
		path = pattern.Patch
		method = "PATCH"
	case *annotations.HttpRule_Custom:
		path = pattern.Custom.Path
		method = pattern.Custom.Kind
	}
	body = rule.Body
	responseBody = rule.ResponseBody

	//Replace /url/{id} patterns with /url/:id for GIN
	if strings.Contains(path, "{") && strings.Contains(path, "}") {
		path = strings.ReplaceAll(strings.ReplaceAll(path, "{", ":"), "}", "")
	}

	md := buildMethodDesc(g, m, method, path)
	if method == "GET" {
		md.HasBody = false
	} else if body == "*" {
		md.HasBody = true
		md.Body = ""
	} else if body != "" {
		md.HasBody = true
		md.Body = "." + camelCaseVars(body)
	} else {
		md.HasBody = false
	}
	if responseBody == "*" {
		md.ResponseBody = ""
	} else if responseBody != "" {
		md.ResponseBody = "." + camelCaseVars(responseBody)
	}
	return md
}

// Generate the basic information to define the method
func buildMethodDesc(g *protogen.GeneratedFile, m *protogen.Method, method, path string) *methodDesc {
	defer func() { methodSets[m.GoName]++ }()
	return &methodDesc{
		Name:    m.GoName,
		Num:     methodSets[m.GoName],
		Request: g.QualifiedGoIdent(m.Input.GoIdent),  // rpc 方法中的 request
		Reply:   g.QualifiedGoIdent(m.Output.GoIdent), // rpc 方法中的 response
		Path:    path,
		Method:  method,
		HasVars: len(buildPathVars(m, path)) > 0,
	}
}

// extract variables to handle path-based parameters, such as /user/{id} or /user/:id
func buildPathVars(method *protogen.Method, path string) (res []string) {
	for _, v := range strings.Split(path, "/") {
		if strings.HasPrefix(v, "{") && strings.HasSuffix(v, "}") {
			name := strings.TrimRight(strings.TrimLeft(v, "{"), "}")
			res = append(res, name)
		}
		if strings.HasPrefix(v, ":") { // cater for GIN '/url/:id'
			name := strings.TrimLeft(v, ":")
			res = append(res, name)
		}
	}
	return
}

func camelCaseVars(s string) string {
	var (
		vars []string
		subs = strings.Split(s, ".")
	)
	for _, sub := range subs {
		vars = append(vars, camelCase(sub))
	}
	return strings.Join(vars, ".")
}

// camelCase returns the CamelCased name.
// If there is an interior underscore followed by a lower case letter,
// drop the underscore and convert the letter to upper case.
// There is a remote possibility of this rewrite causing a name collision,
// but it's so remote we're prepared to pretend it's nonexistent - since the
// C++ generator lowercases names, it's extremely unlikely to have two fields
// with different capitalizations.
// In short, _my_field_name_2 becomes XMyFieldName_2.
func camelCase(s string) string {
	if s == "" {
		return ""
	}
	t := make([]byte, 0, 32)
	i := 0
	if s[0] == '_' {
		// Need a capital letter; drop the '_'.
		t = append(t, 'X')
		i++
	}
	// Invariant: if the next letter is lower case, it must be converted
	// to upper case.
	// That is, we process a word at a time, where words are marked by _ or
	// upper case letter. Digits are treated as words.
	for ; i < len(s); i++ {
		c := s[i]
		if c == '_' && i+1 < len(s) && isASCIILower(s[i+1]) {
			continue // Skip the underscore in s.
		}
		if isASCIIDigit(c) {
			t = append(t, c)
			continue
		}
		// Assume we have a letter now - if not, it's a bogus identifier.
		// The next word is a sequence of characters that must start upper case.
		if isASCIILower(c) {
			c ^= ' ' // Make it a capital letter.
		}
		t = append(t, c) // Guaranteed not lower case.
		// Accept lower case sequence that follows.
		for i+1 < len(s) && isASCIILower(s[i+1]) {
			i++
			t = append(t, s[i])
		}
	}
	return string(t)
}

// Is c an ASCII lower-case letter?
func isASCIILower(c byte) bool {
	return 'a' <= c && c <= 'z'
}

// Is c an ASCII digit?
func isASCIIDigit(c byte) bool {
	return '0' <= c && c <= '9'
}
